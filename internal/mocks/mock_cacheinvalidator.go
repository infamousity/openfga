// Code generated by MockGen. DO NOT EDIT.
// Source: cache_invalidator.go
//
// Generated by this command:
//
//	mockgen -source cache_invalidator.go -destination ../../internal/mocks/mock_cacheinvalidator.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCacheInvalidator is a mock of CacheInvalidator interface.
type MockCacheInvalidator struct {
	ctrl     *gomock.Controller
	recorder *MockCacheInvalidatorMockRecorder
	isgomock struct{}
}

// MockCacheInvalidatorMockRecorder is the mock recorder for MockCacheInvalidator.
type MockCacheInvalidatorMockRecorder struct {
	mock *MockCacheInvalidator
}

// NewMockCacheInvalidator creates a new mock instance.
func NewMockCacheInvalidator(ctrl *gomock.Controller) *MockCacheInvalidator {
	mock := &MockCacheInvalidator{ctrl: ctrl}
	mock.recorder = &MockCacheInvalidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheInvalidator) EXPECT() *MockCacheInvalidatorMockRecorder {
	return m.recorder
}

// GetLastWriteAndInvalidate mocks base method.
func (m *MockCacheInvalidator) GetLastWriteAndInvalidate(ctx context.Context, storeID string) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastWriteAndInvalidate", ctx, storeID)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetLastWriteAndInvalidate indicates an expected call of GetLastWriteAndInvalidate.
func (mr *MockCacheInvalidatorMockRecorder) GetLastWriteAndInvalidate(ctx, storeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastWriteAndInvalidate", reflect.TypeOf((*MockCacheInvalidator)(nil).GetLastWriteAndInvalidate), ctx, storeID)
}
