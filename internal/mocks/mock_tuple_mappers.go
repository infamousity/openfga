// Code generated by MockGen. DO NOT EDIT.
// Source: tuple_mappers.go
//
// Generated by this command:
//
//	mockgen -source tuple_mappers.go -destination ../../internal/mocks/mock_tuple_mappers.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTupleMapper is a mock of TupleMapper interface.
type MockTupleMapper struct {
	ctrl     *gomock.Controller
	recorder *MockTupleMapperMockRecorder
	isgomock struct{}
}

// MockTupleMapperMockRecorder is the mock recorder for MockTupleMapper.
type MockTupleMapperMockRecorder struct {
	mock *MockTupleMapper
}

// NewMockTupleMapper creates a new mock instance.
func NewMockTupleMapper(ctrl *gomock.Controller) *MockTupleMapper {
	mock := &MockTupleMapper{ctrl: ctrl}
	mock.recorder = &MockTupleMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTupleMapper) EXPECT() *MockTupleMapperMockRecorder {
	return m.recorder
}

// Head mocks base method.
func (m *MockTupleMapper) Head(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockTupleMapperMockRecorder) Head(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockTupleMapper)(nil).Head), ctx)
}

// Next mocks base method.
func (m *MockTupleMapper) Next(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockTupleMapperMockRecorder) Next(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockTupleMapper)(nil).Next), ctx)
}

// Stop mocks base method.
func (m *MockTupleMapper) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTupleMapperMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTupleMapper)(nil).Stop))
}

// MockIObjectMapper is a mock of IObjectMapper interface.
type MockIObjectMapper struct {
	ctrl     *gomock.Controller
	recorder *MockIObjectMapperMockRecorder
	isgomock struct{}
}

// MockIObjectMapperMockRecorder is the mock recorder for MockIObjectMapper.
type MockIObjectMapperMockRecorder struct {
	mock *MockIObjectMapper
}

// NewMockIObjectMapper creates a new mock instance.
func NewMockIObjectMapper(ctrl *gomock.Controller) *MockIObjectMapper {
	mock := &MockIObjectMapper{ctrl: ctrl}
	mock.recorder = &MockIObjectMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIObjectMapper) EXPECT() *MockIObjectMapperMockRecorder {
	return m.recorder
}

// Head mocks base method.
func (m *MockIObjectMapper) Head(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockIObjectMapperMockRecorder) Head(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockIObjectMapper)(nil).Head), ctx)
}

// Next mocks base method.
func (m *MockIObjectMapper) Next(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockIObjectMapperMockRecorder) Next(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockIObjectMapper)(nil).Next), ctx)
}

// Stop mocks base method.
func (m *MockIObjectMapper) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockIObjectMapperMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIObjectMapper)(nil).Stop))
}
